<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Markets Correlation</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <h3>{{ loaded_date }}</h3>
        </div>
        <div class="row" style="display:contents">
            <div id="container-macro" style="height: 500px"></div>
        </div>
        <div class="row" style="display:contents">
            <div id="container-sectors" style="height: 700px"></div>
        </div>
    </div>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-core.min.js"></script>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-sparkline.min.js"></script>
    <script src="https://cdn.anychart.com/releases/8.12.1/js/anychart-table.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script type="text/javascript">
        function getColorHex(changeVal) {
            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);
            
            // Clamping changeVal to the range [-0.1, 0.1]
            const clampedVal = clamp(changeVal, -0.1, 0.1);
        
            // Hex color values for -0.1, 0, and 0.1
            const negColor = [255, 199, 199];  // #ffc7c7
            const zeroColor = [247, 250, 247]; // #f7faf7
            const posColor = [199, 252, 200];  // #c7fcc8
        
            let startColor, endColor, normalizedVal;
        
            if (clampedVal < 0) {
                // Interpolate between negColor and zeroColor
                startColor = negColor;
                endColor = zeroColor;
                normalizedVal = (clampedVal + 0.1) / 0.1;
            } else {
                // Interpolate between zeroColor and posColor
                startColor = zeroColor;
                endColor = posColor;
                normalizedVal = clampedVal / 0.1;
            }
        
            // Interpolating the color values
            const interpolatedColor = startColor.map((start, index) => {
                const end = endColor[index];
                return Math.round(start + (end - start) * normalizedVal);
            });
        
            // Converting the interpolated color to hex
            const toHex = num => num.toString(16).padStart(2, '0');
            const hexColor = `#${toHex(interpolatedColor[0])}${toHex(interpolatedColor[1])}${toHex(interpolatedColor[2])}`;
        
            return hexColor;
        }

        function generate_chart(container_id, corr_data, corr_changes, changes_pct) {
            tickers = [null, ...Object.keys( corr_data )]
            tickerMapping = tickers.reduce((acc, curr, index) => {
                acc[curr] = index;
                return acc;
            }, {});

            let m = n = tickers.length;
            contents = new Array( m );
            for (let i = 0; i < m; i++) {
                if (i == 0) {
                    contents[i] = tickers;
                } else {
                    let row = new Array(n).fill(null);
                    let data = corr_data[ tickers[i] ] ;
                    for (let j = 0; j < n; j++) {
                        row[j] = (j == 0) ? tickers[i] : anychart.sparkline( data[ tickers[j] ] )
                        if (j > 0) {
                            row[j].background().fill( getColorHex(corr_changes[ tickers[i] ][ tickers[j] ]) );
                            row[j].negativeMarkers().enabled(true).stroke("0.1 red")
                        }
                    }
                    contents[i] = row;
                }
            }

            // hydrate table contents with returns pct changes
            for (let i = 0; i < contents.length; i++) {
                if (i == 0) {
                    contents[i] = [null, ...contents[i]];
                } else {
                    price_change = changes_pct[contents[i][0]];
                    price_icon = (price_change > 0) ? "ðŸŸ© " : (price_change < 0) ? "ðŸŸ¥ " : "â›” ";
                    price_change = price_icon + price_change.toFixed(2) + "%";
                    contents[i] = [price_change, ...contents[i]];
                }
            }

            // create table
            var table = anychart.standalones.table();

            // set table content
            table.contents(contents);

            table.getCol(0).width(70);      // Get first column and set width 70 px

            table
                .cellBorder("#B8B8B8")        // Adjust table border
                .vAlign("middle")             // Position text into the center
                .hAlign("center")             // Position text into the center
                .height(m * 40)                  // Set table height
                .width(m * 100);                  // Set table width

            // set table container and initiate draw
            table.maxHeight();
            
            table.container(container_id).draw();
        }

        anychart.onDocumentReady(function () {

            rawMacroCorrData = {{ raw_macro_corr_data }};
            rawMacroCorrChanges = {{ raw_macro_corr_changes }};
            rawMacroChangesPct = {{ raw_macro_changes_pct }};
            generate_chart("container-macro", rawMacroCorrData, rawMacroCorrChanges, rawMacroChangesPct);

            rawSectorsCorrData = {{ raw_sectors_corr_data }};
            rawSectorsCorrChanges = {{ raw_sectors_corr_changes }};
            rawSectorsChangesPct = {{ raw_sectors_changes_pct }};
            generate_chart("container-sectors", rawSectorsCorrData, rawSectorsCorrChanges, rawSectorsChangesPct);
        });
    </script>
</body>
</html>